# -*- coding: utf-8 -*-
"""
Created on Thu Dec 29 21:40:41 2022

@author: Divyaj
"""

import os
os.environ["KMP_DUPLICATE_LIB_OK"]="TRUE"

import torch
from torch import nn
import torchvision
import torchvision.transforms as transforms

import math
import matplotlib.pyplot as plt

torch.manual_seed(1111)

device = ""
if torch.cuda.is_available():
    device = torch.device("cuda")
else:
    device = torch.device("cpu")   

#creating a transform function to transform the images in required 
#format
transform = transforms.Compose(
    [transforms.ToTensor(), transforms.Normalize((0.5,),(0.5,))]
    )

#downlading the datast from the database
train_set = torchvision.datasets.MNIST(
    root = ".", train=True, download=True, transform=transform)

#creating a data loader in pytorch 
batch_size = 32
train_loader = torch.utils.data.DataLoader(
    train_set, batch_size=batch_size, shuffle=True
    )

#visualizing the data
real_samples, mnist_labels = next(iter(train_loader))
for i in range(16):
    ax = plt.subplot(4,4,i+1)
    plt.imshow(real_samples[i].reshape(28,28), cmap="gray_r")
    plt.xticks([])
    plt.yticks([])
    
class Discriminator(nn.Module):
    def __init__(self):
        super().__init__()
        self.model=nn.Sequential(
            nn.Linear(784, 1024),
            nn.ReLU(),
            nn.Dropout(0.3),
            nn.Linear(1024,512), 
            nn.ReLU(),
            nn.Dropout(0.3),
            nn.Linear(512,256),
            nn.ReLU(),
            nn.Dropout(0.3),
            nn.Linear(256,1),
            nn.Sigmoid()
            )
        
    def forward(self, x):
        x = x.view(x.size(0), 784)
        return self.model(x)
    
class Generator(nn.Module):
    def __init__(self):
        super().__init__()
        self.model=nn.Sequential(
            nn.Linear(100,256),
            nn.ReLU(),
            nn.Linear(256,512),
            nn.ReLU(),
            nn.Linear(512,1024),
            nn.ReLU(),
            nn.Linear(1024,784)
        )
    
    def forward(self,x):
        output = self.model(x)
        output = output.view(x.size(0), 1, 28, 28)
        return output
    
discriminator = Discriminator().to(device=device)
generator = Generator().to(device=device)

lr = 0.001
num_epochs = 30
loss_function = nn.BCELoss()

optimizer_discriminator = torch.optim.Adam(discriminator.parameters(), lr=lr)
optimizer_generator = torch.optim.Adam(generator.parameters(), lr=lr)

#training the models

for epoch in range(num_epochs):
    for n, (real_samples, mnist_labels) in enumerate(train_loader):
        
        #data for training the generator
        real_samples = real_samples.to(device=device)
        real_samples_labels = torch.ones((batch_size,1)).to(device=device)
        latent_space_samples = torch.randn((batch_size, 100)).to(device=
                                                                 device)
        generated_samples = generator(latent_space_samples)
        generated_samples_labels = torch.zeros((batch_size, 1)).to(
            device=device)
        disc_samples = torch.cat((real_samples, generated_samples))
        disc_labels = torch.cat((real_samples_labels, 
                                generated_samples_labels))

        #training the dsicsiminator
        discriminator.zero_grad()
        output_discriminator = discriminator(disc_samples)
        loss_discriminator = loss_function(
            output_discriminator, disc_labels)
        loss_discriminator.backward()
        optimizer_discriminator.step()
        
        latent_space_samples = torch.randn((batch_size, 100)).to(device=
                                                                 device)
        #training the generator
        generator.zero_grad()
        output_generator = generator(latent_space_samples)
        output_discriminator_generated = discriminator(
            output_generator)
        loss_generator = loss_function(
            output_discriminator_generated, real_samples_labels)
        loss_generator.backward()
        optimizer_generator.step()
        
        # Show loss
        if n == batch_size - 1:
            print(f"Epoch: {epoch} Loss D.: {loss_discriminator}")
            print(f"Epoch: {epoch} Loss G.: {loss_generator}")
           
#checking the samples generated by the Generator
latent_space_samples = torch.randn((batch_size, 100)).to(device=device)
generated_samples = generator(latent_space_samples)

generated_samples = generated_samples.cpu().detach()
for i in range(16):
    ax = plt.subplot(4,4,i+1)
    plt.imshow(generated_samples[i].reshape(28,28), cmap="gray_r")
    plt.xticks([])
    plt.yticks([])